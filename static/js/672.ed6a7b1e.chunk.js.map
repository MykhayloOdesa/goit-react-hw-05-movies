{"version":3,"file":"static/js/672.ed6a7b1e.chunk.js","mappings":"oOAEe,SAASA,EAAT,GAA8B,IAAZC,EAAW,EAAXA,QAC/B,OACE,wBACGA,EAAQC,OAAS,EAChBD,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,2BACE,uBAAID,KACJ,uBAAIC,MAFGF,EADC,KAOZ,+EAIP,CCVc,SAASG,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAWH,GACRI,MAAK,SAAAC,GACJN,EAAWM,EACZ,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACP,EAAST,KAEN,8BAAGA,IAAW,SAACD,EAAD,CAAQC,QAASA,KACvC,C,+LClBKmB,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,cACxBG,EADwB,yBAKvBA,EAASC,MALc,2CAAH,qDAQhBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCM,EADhC,+CADQ,cACzBH,EADyB,yBAKxBA,EAASC,KAAKG,SALU,2CAAH,sDAQjBC,EAAmB,mCAAG,WAAMzB,GAAN,uFACVmB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAhB,EADA,oBACciB,EADd,oBADU,cAC3BG,EAD2B,yBAK1BA,EAASC,MALiB,2CAAH,sDAQnBK,EAAS,mCAAG,WAAMpB,GAAN,uFACAa,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAV,EADA,4BAC2BW,EAD3B,oBADA,cACjBG,EADiB,yBAKhBA,EAASC,KAAKM,MALE,2CAAH,sDAQTlB,EAAU,mCAAG,WAAMH,GAAN,uFACDa,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAV,EADA,4BAC2BW,EAD3B,2BADC,cAClBG,EADkB,yBAKjBA,EAASC,KAAKG,SALG,2CAAH,qD","sources":["components/Review/Review.jsx","pages/Reviews.jsx","services/serviceAPI.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport default function Review({ reviews }) {\n  return (\n    <ul>\n      {reviews.length > 0 ? (\n        reviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <p>{author}</p>\n            <p>{content}</p>\n          </li>\n        ))\n      ) : (\n        <h2>Sorry, we don't have any reviews about this movie</h2>\n      )}\n    </ul>\n  );\n}\n\nReview.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getReviews } from 'services/serviceAPI';\n\nimport Review from 'components/Review/Review';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getReviews(movieId)\n      .then(result => {\n        setReviews(result);\n      })\n      .catch(error => console.log(error));\n  }, [movieId, reviews]);\n\n  return <>{reviews && <Review reviews={reviews} />}</>;\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1e05df569b86c18215793cf38cfe4572';\n\nexport const getTrendingMovie = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesBySearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const getActors = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n};\n"],"names":["Review","reviews","length","map","id","author","content","Reviews","useState","setReviews","movieId","useParams","useEffect","getReviews","then","result","catch","error","console","log","BASE_URL","API_KEY","getTrendingMovie","axios","response","data","getMoviesBySearch","query","results","getMovieDetailsById","getActors","cast"],"sourceRoot":""}