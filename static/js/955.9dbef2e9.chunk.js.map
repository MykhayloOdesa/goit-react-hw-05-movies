{"version":3,"file":"static/js/955.9dbef2e9.chunk.js","mappings":"oOAEe,SAASA,EAAT,GAA2B,IAATC,EAAQ,EAARA,KAC/B,OACE,wBACGA,GACCA,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACP,2BACE,gBACEC,IACEF,GAAY,6CAC0BA,GAExCG,IAAKJ,EACLK,MAAM,MACNC,OAAO,SAET,wBAAKN,KACL,uCAAeE,OAXRH,EADF,KAiBhB,CChBc,SAASQ,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOX,EAAP,KAAaY,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAUH,GACPI,MAAK,SAAAC,GACJN,EAAQM,EACT,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACP,KAGF,+BACE,SAACd,EAAD,CAAQC,KAAMA,KAGnB,C,+LCtBKuB,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,cACxBG,EADwB,yBAKvBA,EAAST,MALc,2CAAH,qDAQhBU,EAAiB,mCAAG,WAAMC,GAAN,uFACRH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCK,EADhC,+CADQ,cACzBF,EADyB,yBAKxBA,EAAST,KAAKY,SALU,2CAAH,sDAQjBC,EAAmB,mCAAG,WAAM7B,GAAN,uFACVwB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACArB,EADA,oBACcsB,EADd,oBADU,cAC3BG,EAD2B,yBAK1BA,EAAST,MALiB,2CAAH,sDAQnBF,EAAS,mCAAG,WAAMH,GAAN,uFACAa,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAV,EADA,4BAC2BW,EAD3B,oBADA,cACjBG,EADiB,yBAKhBA,EAAST,KAAKlB,MALE,2CAAH,sDAQTgC,EAAU,mCAAG,WAAMnB,GAAN,uFACDa,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAV,EADA,4BAC2BW,EAD3B,2BADC,cAClBG,EADkB,yBAKjBA,EAAST,KAAKY,SALG,2CAAH,qD","sources":["components/Actors/Actors.jsx","pages/Cast.jsx","services/serviceAPI.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport default function Actors({ cast }) {\n  return (\n    <ul>\n      {cast &&\n        cast.map(({ id, name, profile_path, character }) => (\n          <li key={id}>\n            <img\n              src={\n                profile_path &&\n                `https://image.tmdb.org/t/p/original${profile_path}`\n              }\n              alt={name}\n              width=\"300\"\n              height=\"300\"\n            />\n            <h2>{name}</h2>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nActors.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getActors } from 'services/serviceAPI';\n\nimport Actors from 'components/Actors/Actors';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getActors(movieId)\n      .then(data => {\n        setCast(data);\n      })\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <>\n      <Actors cast={cast} />\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1e05df569b86c18215793cf38cfe4572';\n\nexport const getTrendingMovie = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesBySearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const getActors = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n};\n"],"names":["Actors","cast","map","id","name","profile_path","character","src","alt","width","height","Cast","useState","setCast","movieId","useParams","useEffect","getActors","then","data","catch","error","console","log","BASE_URL","API_KEY","getTrendingMovie","axios","response","getMoviesBySearch","query","results","getMovieDetailsById","getReviews"],"sourceRoot":""}