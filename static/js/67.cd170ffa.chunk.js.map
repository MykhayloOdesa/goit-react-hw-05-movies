{"version":3,"file":"static/js/67.cd170ffa.chunk.js","mappings":"mMAGe,SAASA,EAAT,GAA2B,IAAXC,EAAU,EAAVA,OACvBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,GACCA,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,eAAgBC,EAApC,EAAoCA,MAApC,OACT,yBACE,UAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMR,GAAYS,GAAE,kBAAaN,GAAhD,WACE,gBACEO,IAAG,6CAAwCN,GAC3CO,IAAKN,EACLO,MAAM,MACNC,OAAO,SAGT,iBAAMC,MAAO,CAAEC,SAAU,QAAzB,SAAoCT,QAT/BH,EADA,KAgBlB,C,kHCvBc,SAASa,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OACE,kBAAMA,SAAUA,EAAhB,WACE,4BACE,kBACEC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,KAAK,cAGT,mBAAQJ,KAAK,SAAb,UACE,+CAIP,C,sBCVc,SAASK,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOzB,EAAP,KAAe0B,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAASJ,EAAaK,IAAI,WAEhCC,EAAAA,EAAAA,YAAU,WACRH,GAAW,GAEY,MAAb,OAANC,QAAM,IAANA,OAAA,EAAAA,EAAQG,SACVC,MAAM,gCAGRC,EAAAA,EAAAA,IAAkBL,GACfM,KAAKZ,GACLa,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,QAAQZ,GAAW,GACvB,GAAE,CAACC,IAUJ,OACE,iCACE,SAACf,EAAD,CAAWC,SAVE,SAAA0B,GACfA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,cACnBlB,EAAgB,CAAEG,OAAQc,EAAKE,SAAShB,OAAOiB,QAC/CH,EAAKI,OACN,IAKIpB,IAAW,SAACqB,EAAA,EAAD,IACXnB,IAAU,SAACjC,EAAA,EAAD,CAAMC,OAAQA,MAG9B,C,+LCzCKoD,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,cACxBG,EADwB,yBAKvBA,EAASC,MALc,2CAAH,qDAQhBpB,EAAiB,mCAAG,WAAMqB,GAAN,uFACRH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCK,EADhC,+CADQ,cACzBF,EADyB,yBAKxBA,EAASC,KAAKE,SALU,2CAAH,sDAQjBC,EAAmB,mCAAG,WAAMxD,GAAN,uFACVmD,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAhD,EADA,oBACciD,EADd,oBADU,cAC3BG,EAD2B,yBAK1BA,EAASC,MALiB,2CAAH,sDAQnBI,EAAS,mCAAG,WAAMC,GAAN,uFACAP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,4BAC2BT,EAD3B,oBADA,cACjBG,EADiB,yBAKhBA,EAASC,KAAKM,MALE,2CAAH,sDAQTC,EAAU,mCAAG,WAAMF,GAAN,uFACDP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,4BAC2BT,EAD3B,2BADC,cAClBG,EADkB,yBAKjBA,EAASC,KAAKE,SALG,2CAAH,qD","sources":["components/List.jsx","components/Searchbar.jsx","pages/Movies.jsx","services/serviceAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport default function List({ movies }) {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies &&\n        movies.map(({ id, poster_path, original_title, title }) => (\n          <li key={id}>\n            <Link state={{ from: location }} to={`/movies/${id}`}>\n              <img\n                src={`https://image.tmdb.org/t/p/original${poster_path}`}\n                alt={original_title}\n                width=\"300\"\n                height=\"300\"\n              />\n\n              <span style={{ fontSize: '12px' }}>{title}</span>\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      original_title: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import PropTypes from 'prop-types';\n\nexport default function Searchbar({ onSubmit }) {\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n          name=\"search\"\n        />\n      </label>\n      <button type=\"submit\">\n        <span>üîç</span>\n      </button>\n    </form>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getMoviesBySearch } from 'services/serviceAPI';\n\nimport Searchbar from 'components/Searchbar';\nimport List from 'components/List';\nimport Loader from 'components/Loader';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const search = searchParams.get('search');\n\n  useEffect(() => {\n    setLoading(true);\n\n    if (search?.trim() === '') {\n      alert('Please insert correct data!');\n    }\n\n    getMoviesBySearch(search)\n      .then(setMovies)\n      .catch(error => console.log(error))\n      .finally(setLoading(false));\n  }, [search]);\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    setSearchParams({ search: form.elements.search.value });\n    form.reset();\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={onSubmit} />\n      {loading && <Loader />}\n      {search && <List movies={movies} />}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1e05df569b86c18215793cf38cfe4572';\n\nexport const getTrendingMovie = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesBySearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const getActors = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n};\n"],"names":["List","movies","location","useLocation","map","id","poster_path","original_title","title","state","from","to","src","alt","width","height","style","fontSize","Searchbar","onSubmit","type","autoComplete","autoFocus","placeholder","name","Movies","useState","setMovies","useSearchParams","searchParams","setSearchParams","loading","setLoading","search","get","useEffect","trim","alert","getMoviesBySearch","then","catch","error","console","log","finally","event","preventDefault","form","currentTarget","elements","value","reset","Loader","BASE_URL","API_KEY","getTrendingMovie","axios","response","data","query","results","getMovieDetailsById","getActors","movieId","cast","getReviews"],"sourceRoot":""}